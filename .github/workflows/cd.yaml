name: Continuous Deployment

on:
  push:
    tags: ["v*"]

defaults:
  run:
    shell: bash

jobs:
  deploy:
    name: Create Release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3.6.0

      - name: Set up Python 3.11
        uses: actions/setup-python@v4.7.0
        with:
          python-version: "3.11"

      - id: cache-dependencies
        name: Cache dependencies
        uses: actions/cache@v3.3.1
        with:
          path: ${{ github.workspace }}/.venv
          key: dependencies-${{ hashFiles('**/poetry.lock') }}
          restore-keys: dependencies-

      - name: Install dependencies
        if: steps.cache-dependencies.cache-hit != 'true'
        run: |
          python -m pip install -U pip poetry
          poetry check --no-interaction
          poetry config virtualenvs.in-project true
          poetry install --no-interaction

      - name: Run tests
        run: |
          git config --global user.email "28790446+rodneyosodo@users.noreply.github.com"
          git config --global user.name "Rodney Osodo"
          poetry run coverage run --source=commitgpt -m pytest commitgpt/
          coveralls

      - name: Add version to environment
        run: |
          PROJECT_VERSION=$(poetry version --short)
          echo "PROJECT_VERSION=$PROJECT_VERSION" >> $GITHUB_ENV

      - name: Build artifacts
        run: |
          poetry build --no-interaction

      - name: Create Release Draft
        uses: softprops/action-gh-release@v1
        with:
          body_path: "CHANGELOG.md"
          draft: true
          files: |
            dist/commitgpt-${{env.PROJECT_VERSION}}-py3-none-any.whl
            dist/commitgpt-${{env.PROJECT_VERSION}}.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: Publish to PyPI
        env:
          PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}
        run: |
          poetry config pypi-token.pypi $PYPI_TOKEN
          poetry publish --build --no-interaction
